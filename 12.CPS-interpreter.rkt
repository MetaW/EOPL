 #lang eopl
;lang-CPS-interpreter


;concrete & abstract syntax tree & scanner/parser
;=====================================================================

;---concrete syntax tree:

;Program :: = Expression

;Expression :: = Number
;              | -(Expression, Expression)
;              | zero? (Expression)
;              | if Expression then Expression else Expression
;              | Identifer
;              | let Identifer = Expression in Expression
;              | proc (Idenfifer) Expression
;              | (Expression Expression)



;---scanner&grammar spec
(define scanner-spec
  '((whitespace (whitespace) skip)
    (comment ("%" (arbno (not #\newline))) skip)
    (identifer (letter (arbno (or letter digit "-" "_" "?"))) symbol)
    (number (digit (arbno digit)) number)
    (number ("-" digit (arbno digit)) number)))
;   (class (regexp) action)
; string (keyword) from grammar-spec (eg: "-","if","let","=",...) has a higher priority than that in scanner-spec.


(define grammar-spec
 '((program (expression) a-program)
   (expression (number) const-exp)
   (expression ("-" "(" expression "," expression ")") diff-exp)
   (expression ("zero?" "(" expression ")") zero?-exp)
   (expression ("if" expression "then" expression "else" expression) if-exp)
   (expression (identifer) var-exp)
   (expression ("let" identifer "=" expression "in" expression) let-exp)
   (expression ("proc" "(" identifer ")" expression) proc-exp)
   (expression ("(" expression expression ")") call-exp)))
;  (algebric-data-type (reg-exp of concrete-syntax with class/string/ADT) constructor)
; class/string -> terminator
; ADT -> nonterminator


;---abstract syntax tree

; use auto-generated datatype for program and expression
;(sllgen:make-define-datatypes scanner-spec grammar-spec)

;see what is generated by calling (show-the-datatypes), the result is following:
;(define show-the-datatypes
;  (lambda () (sllgen:list-define-datatypes scanner-spec grammar-spec)))


;the following datatype can be auto-generated as mentioned above.
(define-datatype program program?
  (a-program (a-program1 expression?)))

(define-datatype expression expression?
   (const-exp (const-exp2 number?))
   (diff-exp (diff-exp3 expression?) (diff-exp4 expression?))
   (zero?-exp (zero?-exp5 expression?))
   (if-exp (if-exp6 expression?) (if-exp7 expression?) (if-exp8 expression?))
   (var-exp (var-exp9 symbol?))
   (let-exp (let-exp10 symbol?) (let-exp11 expression?) (let-exp12 expression?))
   (proc-exp (proc-exp13 symbol?) (proc-exp14 expression?))
   (call-exp (call-exp15 expression?) (call-exp16 expression?)))



; auto-generated scanner & parser:

; scan&parse : string -> program
(define scan&parse
  (sllgen:make-string-parser scanner-spec grammar-spec))


; expressed value & denoted value
;=====================================================================
;expressed value : Int Bool Proc Mutpair
;denoted value   : Ref(expressed value)
;-------

;------ scheme value

; datatype proc is not necessary
(define-datatype proc proc?
  (procedure (var symbol?)
             (body expression?)
             (en env?)))
; ref type = number => address in store
(define ref?
  (lambda (ref)
    (number? ref)))


;------ expressed value : expval
(define-datatype expval expval?
  (num-val (num number?))
  (bool-val (bool boolean?))
  (proc-val (proc proc?)))


; extractor : expval -> number
(define expval->num
  (lambda (val)
    (cases expval val
      (num-val (num) num)
      (else (eopl:error "expval extract error in expval->num: ~s" val)))))

; extractor : expval -> bool
(define expval->bool
  (lambda (val)
    (cases expval val
      (bool-val (bool) bool)
      (else (eopl:error "expval extract error in expval->bool: ~s" val)))))

; extractor : expval -> proc
(define expval->proc
  (lambda (val)
    (cases expval val
      (proc-val (proc) proc)
      (else (eopl:error "expval extract error in expval->proc: ~s" val)))))


; environment & store
;=====================================================================
;env   : var --- ref
;store :         ref--- expval


;---environment---   

(define-datatype env env?
  (empty-env)
  (extend-env (var symbol?)
              (val ref?) ; !!! in this lang env only stores reference, its value is stored in stores.
              (e env?)))

; init-env
(define init-env
  (extend-env
   'i 2
   (extend-env
    'v 1
    (extend-env
     'x 0
     (empty-env)))))


; apply-env : symbol * env -> ref
(define apply-env
  (lambda (var en)
    (cases env en
      (empty-env () (eopl:error "Unbound variable : ~s" var))
      (extend-env (v val e)
                  (if (equal? v var)
                      val
                      (apply-env var e))))))



;---store---
;unlike env, store is global
(define the-store 'uninitialized)

;---interface-for-store

;empty-store : () -> '()
(define empty-store
  (lambda () '()))

(define get-store
  (lambda () the-store))

;---
(define init-store!
  (lambda ()
    (set! the-store (list (num-val 1) (num-val 5) (num-val 10)))))


; continuation
;=====================================================================
(define end-cont
  (lambda (val)
    (begin
      (display "End of computation!")
      val)))


; apply-cont : cont * expval -> finalanswer
(define apply-cont
  (lambda (cont val)
    (cont val)))



; eval
;=====================================================================
; cont :: Expval -> finalanswer
;------

; auxiliary function for value-of

; apply-procdure : proc * ref * cont -> expval  !!!
(define apply-procedure/k
  (lambda (proc0 ref0 cont)
    (cases proc proc0
      (procedure (var body en) (value-of/k body (extend-env var ref0 en) cont)))))

; apply-newref : expval -> ref
(define apply-newref
  (lambda (val)
    (let ([ref (length the-store)])
      (set! the-store (append the-store (list val)))
      ref)))

; apply-deref : ref -> expval
(define apply-deref
  (lambda (ref)
    (list-ref the-store ref)))

; apply-setref : ref * expval -> unspecified
(define apply-setref!
  (lambda (ref val)
    (define in-setref!
      (lambda (store ref)
        (cond ((null? store) (eopl:error "uninitilized store"))
              ((= 0 ref) (cons val (cdr store)))
              (else (cons (car store)
                          (in-setref! (cdr store) (- ref 1)))))))
    (set! the-store (in-setref! the-store ref))))




; value-of/k : Exp * Env * cont -> finalanswer
(define value-of/k
  (lambda (exp env cont)
    (cases expression exp
      (const-exp (num) (apply-cont cont (num-val num)))
      (var-exp (var) (apply-cont cont (apply-deref (apply-env var env))))
      (diff-exp (exp1 exp2) (value-of/k exp1
                                        env
                                        (lambda (val1)
                                          (value-of/k exp2
                                                      env
                                                      (lambda (val2)
                                                        (apply-cont cont
                                                                    (num-val (- (expval->num val1) (expval->num val2)))))))))
      (zero?-exp (exp) (value-of/k exp
                                   env
                                   (lambda (val)
                                     (apply-cont cont
                                                 (bool-val (zero? (expval->num val)))))))
      (if-exp (exp1 exp2 exp3) (value-of/k exp1 env (lambda (val1)
                                                      (if (expval->bool val1)
                                                          (value-of/k exp2 env cont)
                                                          (value-of/k exp3 env cont)))))
      (let-exp (var exp body) (value-of/k exp env (lambda (val)
                                                    (value-of/k body (extend-env var (apply-newref val) env) cont))))
      (proc-exp (param body) (apply-cont cont (proc-val (procedure param body env))))
      (call-exp (procid exp) (value-of/k procid env (lambda (val)
                                                      (let ((proci (expval->proc val)))
                                                         (cases expression exp ;!!!var => get ref, other exp => get value and create a new ref
                                                           (var-exp (var) (apply-procedure/k proci (apply-env var env) cont))
                                                           (else (value-of/k exp env (lambda (val)
                                                                                       (apply-procedure/k proci (apply-newref val) cont))))))))))))


; value-of-program : Program -> Expval
(define value-of-program
  (lambda (pgm)
    (init-store!)
    (cases program pgm
      (a-program (exp) (value-of/k exp init-env end-cont)))))


; run : String -> Expval
(define run
  (lambda (str)
    (value-of-program (scan&parse str))))



; test
;=====================================================================

;> (run "let x = 3 in x")
;  End of computation!#(struct:num-val 3)

;> (run "let f = proc (x) -(x,1) in (f 5)")
;  End of computation!#(struct:num-val 4)

;> (run "let x = 5 in if zero?(x) then x else -(0,x)")
;  End of computation!#(struct:num-val -5)

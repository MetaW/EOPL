#lang eopl
;lang-CALL-BY-REFERENCE


;concrete & abstract syntax tree & scanner/parser
;=====================================================================

;---concrete syntax tree:

;Program :: = Expression

;Expression :: = Number
;              | -(Expression, Expression)
;              | zero? (Expression)
;              | if Expression then Expression else Expression
;              | Identifer
;              | let Identifer = Expression in Expression
;              | proc (Idenfifer) Expression
;              | (Expression Expression)
;              | begin Expression {; Expression}* end
;              | set Identifer = Expression
;              | pair(Expression, Expression)
;              | left(Expression)
;              | right(Expression)
;              | setleft(Expression,Expression)
;              | setright(Expression,Expression)



;---scanner&grammar spec
(define scanner-spec
  '((whitespace (whitespace) skip)
    (comment ("%" (arbno (not #\newline))) skip)
    (identifer (letter (arbno (or letter digit "-" "_" "?"))) symbol)
    (number (digit (arbno digit)) number)
    (number ("-" digit (arbno digit)) number)))
;   (class (regexp) action)
; string (keyword) from grammar-spec (eg: "-","if","let","=",...) has a higher priority than that in scanner-spec.


(define grammar-spec
 '((program (expression) a-program)
   (expression (number) const-exp)
   (expression ("-" "(" expression "," expression ")") diff-exp)
   (expression ("zero?" "(" expression ")") zero?-exp)
   (expression ("if" expression "then" expression "else" expression) if-exp)
   (expression (identifer) var-exp)
   (expression ("let" identifer "=" expression "in" expression) let-exp)
   (expression ("proc" "(" identifer ")" expression) proc-exp)
   (expression ("(" expression expression ")") call-exp)
   (expression ("begin" expression (arbno ";" expression) "end") begin-exp)
   (expression ("set" identifer "=" expression) assign-exp)
   (expression ("pair" "(" expression "," expression ")") pair-exp)
   (expression ("left" "(" expression ")") left-exp)
   (expression ("right" "(" expression ")") right-exp)
   (expression ("setleft" "(" expression "," expression ")") setleft-exp)
   (expression ("setright" "(" expression "," expression ")") setright-exp)))
;  (algebric-data-type (reg-exp of concrete-syntax with class/string/ADT) constructor)
; class/string -> terminator
; ADT -> nonterminator


;---abstract syntax tree

; use auto-generated datatype for program and expression
;(sllgen:make-define-datatypes scanner-spec grammar-spec)

;see what is generated by calling (show-the-datatypes), the result is following:
;(define show-the-datatypes
;  (lambda () (sllgen:list-define-datatypes scanner-spec grammar-spec)))


;the following datatype can be auto-generated as mentioned above.
(define-datatype program program?
  (a-program (a-program1 expression?)))

(define-datatype expression expression?
   (const-exp (const-exp2 number?))
   (diff-exp (diff-exp3 expression?) (diff-exp4 expression?))
   (zero?-exp (zero?-exp5 expression?))
   (if-exp (if-exp6 expression?) (if-exp7 expression?) (if-exp8 expression?))
   (var-exp (var-exp9 symbol?))
   (let-exp (let-exp10 symbol?) (let-exp11 expression?) (let-exp12 expression?))
   (proc-exp (proc-exp13 symbol?) (proc-exp14 expression?))
   (call-exp (call-exp15 expression?) (call-exp16 expression?))
   (begin-exp (begin-exp17 expression?) (begin-exp18 (list-of expression?)))
   (assign-exp (assign-exp19 symbol?) (assign-exp20 expression?))
   (pair-exp (pair-exp21 expression?) (pair-exp22 expression?))
   (left-exp (left-exp23 expression?))
   (right-exp (right-exp24 expression?))
   (setleft-exp (setleft-exp25 expression?) (setleft-exp26 expression?))
   (setright-exp (setright-exp27 expression?) (setright-exp28 expression?)))



; auto-generated scanner & parser:

; scan&parse : string -> program
(define scan&parse
  (sllgen:make-string-parser scanner-spec grammar-spec))


; expressed value & denoted value
;=====================================================================
;expressed value : Int Bool Proc Mutpair
;denoted value   : Ref(expressed value)
;-------

;------ scheme value

; datatype proc is not necessary
(define-datatype proc proc?
  (procedure (var symbol?)
             (body expression?)
             (en env?)))
; ref type = number => address in store
(define ref?
  (lambda (ref)
    (number? ref)))


;mutpair type
(define-datatype mutpair mutpair?
  (a-pair (left-loc ref?)
          (right-loc ref?)))


;------ expressed value : expval
(define-datatype expval expval?
  (num-val (num number?))
  (bool-val (bool boolean?))
  (proc-val (proc proc?))
  (mutpair-val (pair mutpair?)))


; extractor : expval -> number
(define expval->num
  (lambda (val)
    (cases expval val
      (num-val (num) num)
      (else (eopl:error "expval extract error in expval->num: ~s" val)))))

; extractor : expval -> bool
(define expval->bool
  (lambda (val)
    (cases expval val
      (bool-val (bool) bool)
      (else (eopl:error "expval extract error in expval->bool: ~s" val)))))

; extractor : expval -> proc
(define expval->proc
  (lambda (val)
    (cases expval val
      (proc-val (proc) proc)
      (else (eopl:error "expval extract error in expval->proc: ~s" val)))))
; extractor : expval -> mutpair
(define expval->mutpair
  (lambda (val)
    (cases expval val
      (mutpair-val (mutpair) mutpair)
      (else (eopl:error "expval extract error in expval->mutpair: ~s" val)))))


; environment & store
;=====================================================================
;env   : var --- ref
;store :         ref--- expval


;---environment---   

(define-datatype env env?
  (empty-env)
  (extend-env (var symbol?)
              (val ref?) ; !!! in this lang env only stores reference, its value is stored in stores.
              (e env?)))

; init-env
(define init-env
  (extend-env
   'i 2
   (extend-env
    'v 1
    (extend-env
     'x 0
     (empty-env)))))


; apply-env : symbol * env -> ref
(define apply-env
  (lambda (var en)
    (cases env en
      (empty-env () (eopl:error "Unbound variable : ~s" var))
      (extend-env (v val e)
                  (if (equal? v var)
                      val
                      (apply-env var e))))))



;---store---
;unlike env, store is global
(define the-store 'uninitialized)

;---interface-for-store

;empty-store : () -> '()
(define empty-store
  (lambda () '()))

(define get-store
  (lambda () the-store))

;---
(define init-store!
  (lambda ()
    (set! the-store (list (num-val 1) (num-val 5) (num-val 10)))))

; eval
;=====================================================================

; auxiliary function for value-of

; apply-procdure : proc * ref -> expval  !!!
(define apply-procedure
  (lambda (proc0 ref0)
    (cases proc proc0
      (procedure (var body en) (value-of body (extend-env var ref0 en))))))

; apply-newref : expval -> ref
(define apply-newref
  (lambda (val)
    (let ([ref (length the-store)])
      (set! the-store (append the-store (list val)))
      ref)))

; apply-deref : ref -> expval
(define apply-deref
  (lambda (ref)
    (list-ref the-store ref)))

; apply-setref : ref * expval -> unspecified
(define apply-setref!
  (lambda (ref val)
    (define in-setref!
      (lambda (store ref)
        (cond ((null? store) (eopl:error "uninitilized store"))
              ((= 0 ref) (cons val (cdr store)))
              (else (cons (car store)
                          (in-setref! (cdr store) (- ref 1)))))))
    (set! the-store (in-setref! the-store ref))))




; value-of : Exp * Env -> ExpVal
(define value-of
  (lambda (exp env)
    (cases expression exp
      (const-exp (num) (num-val num))
      (var-exp (var) (apply-deref (apply-env var env)))
      (diff-exp (exp1 exp2) (num-val
                             (- (expval->num (value-of exp1 env))
                                (expval->num (value-of exp2 env)))))
      (zero?-exp (exp)
                 (let ((val (expval->num (value-of exp env))))
                   (if (= val 0)
                       (bool-val #t)
                       (bool-val #f))))
      (if-exp (exp1 exp2 exp3)
              (let ((condi (expval->bool (value-of exp1 env))))
                (if condi
                    (value-of exp2 env)
                    (value-of exp3 env))))
      (let-exp (var exp body) (value-of body
                                        (extend-env var
                                                    (apply-newref (value-of exp env))
                                                    env)))
      (proc-exp (param body) (proc-val (procedure param body env)))
      (call-exp (procid exp)
                (let ((proci (expval->proc (value-of procid env)))
                      (refi (cases expression exp ;!!!var => get ref, other exp => get value and create a new ref
                              (var-exp (var) (apply-env var env))
                              (else (apply-newref (value-of exp env))))))
                  (apply-procedure proci refi)))
      (begin-exp (exp exps)
                 (define inner
                   (lambda (expr exprs)
                     (let ((v1 (value-of expr env)))
                         (if (null? exprs)
                         v1
                         (inner (car exprs) (cdr exprs))))))
                 (inner exp exps))
      (assign-exp (var exp) (apply-setref! (apply-env var env) (value-of exp env)))
      (pair-exp (exp1 exp2) (let ((v1 (value-of exp1 env))
                                  (v2 (value-of exp2 env)))
                              (mutpair-val (a-pair (apply-newref v1) (apply-newref v2)))))
      (left-exp (exp) (let ((v (expval->mutpair (value-of exp env))))
                        (cases mutpair v
                          (a-pair (l-loc r-loc) (apply-deref l-loc)))))
      (right-exp (exp) (let ((v (expval->mutpair (value-of exp env))))
                        (cases mutpair v
                          (a-pair (l-loc r-loc) (apply-deref r-loc)))))
      (setleft-exp (exp1 exp2) (let ([pair (expval->mutpair (value-of exp1 env))]
                                     [val (value-of exp2 env)])
                                 (cases mutpair pair
                                   (a-pair (l-loc r-loc) (apply-setref! l-loc val)))))
      (setright-exp (exp1 exp2) (let ([pair (expval->mutpair (value-of exp1 env))]
                                     [val (value-of exp2 env)])
                                 (cases mutpair pair
                                   (a-pair (l-loc r-loc) (apply-setref! r-loc val))))))))


; value-of-program : Program -> Expval
(define value-of-program
  (lambda (pgm)
    (init-store!)
    (cases program pgm
      (a-program (exp) (value-of exp init-env)))))


; run : String -> Expval
(define run
  (lambda (str)
    (value-of-program (scan&parse str))))



; test
;=====================================================================

;> (run "let f = proc (x) set x = 5 in let t = 2 in begin (f t); t end")
;  #(struct:num-val 5)

 #lang eopl
;lang-Exception 

; CPS can not only make our function tail call, and move the control content
; form limited stack into heap, but also get full control of the control flow,
; so that we can implement the expression "try...catch..." and "raise ..." into
; our language.


;concrete & abstract syntax tree & scanner/parser
;=====================================================================

;---concrete syntax tree:

;Program :: = Expression

;Expression :: = Number
;              | -(Expression, Expression)
;              | zero? (Expression)
;              | if Expression then Expression else Expression
;              | Identifer
;              | let Identifer = Expression in Expression
;              | proc (Idenfifer) Expression
;              | (Expression Expression)
;              | try Expression catch (Identifer) Expression
;              | raise Expression


;---scanner&grammar spec
(define scanner-spec
  '((whitespace (whitespace) skip)
    (comment ("%" (arbno (not #\newline))) skip)
    (identifer (letter (arbno (or letter digit "-" "_" "?"))) symbol)
    (number (digit (arbno digit)) number)
    (number ("-" digit (arbno digit)) number)))
;   (class (regexp) action)
; string (keyword) from grammar-spec (eg: "-","if","let","=",...) has a higher priority than that in scanner-spec.


(define grammar-spec
 '((program (expression) a-program)
   (expression (number) const-exp)
   (expression ("-" "(" expression "," expression ")") diff-exp)
   (expression ("zero?" "(" expression ")") zero?-exp)
   (expression ("if" expression "then" expression "else" expression) if-exp)
   (expression (identifer) var-exp)
   (expression ("let" identifer "=" expression "in" expression) let-exp)
   (expression ("proc" "(" identifer ")" expression) proc-exp)
   (expression ("(" expression expression ")") call-exp)
   (expression ("try" expression "catch" "(" identifer ")" expression) try-exp)
   (expression ("raise" expression) raise-exp)))
;  (algebric-data-type (reg-exp of concrete-syntax with class/string/ADT) constructor)
; class/string -> terminator
; ADT -> nonterminator


;---abstract syntax tree

; use auto-generated datatype for program and expression
;(sllgen:make-define-datatypes scanner-spec grammar-spec)

;see what is generated by calling (show-the-datatypes), the result is following:
;(define show-the-datatypes
;  (lambda () (sllgen:list-define-datatypes scanner-spec grammar-spec)))


;the following datatype can be auto-generated as mentioned above.
(define-datatype program program?
  (a-program (a-program1 expression?)))

(define-datatype expression expression?
   (const-exp (const-exp2 number?))
   (diff-exp (diff-exp3 expression?) (diff-exp4 expression?))
   (zero?-exp (zero?-exp5 expression?))
   (if-exp (if-exp6 expression?) (if-exp7 expression?) (if-exp8 expression?))
   (var-exp (var-exp9 symbol?))
   (let-exp (let-exp10 symbol?) (let-exp11 expression?) (let-exp12 expression?))
   (proc-exp (proc-exp13 symbol?) (proc-exp14 expression?))
   (call-exp (call-exp15 expression?) (call-exp16 expression?))
   (try-exp (try-exp17 expression?) (try-exp18 symbol?) (try-exp19 expression?))
   (raise-exp (raise-exp20 expression?)))



; auto-generated scanner & parser:

; scan&parse : string -> program
(define scan&parse
  (sllgen:make-string-parser scanner-spec grammar-spec))


; expressed value & denoted value
;=====================================================================
;expressed value : Int Bool Proc
;denoted value   : Ref(expressed value)
;-------

;------ scheme value

; datatype proc is not necessary
(define-datatype proc proc?
  (procedure (var symbol?)
             (body expression?)
             (en env?)))
; ref type = number => address in store
(define ref?
  (lambda (ref)
    (number? ref)))


;------ expressed value : expval
(define-datatype expval expval?
  (num-val (num number?))
  (bool-val (bool boolean?))
  (proc-val (proc proc?)))


; extractor : expval -> number
(define expval->num
  (lambda (val)
    (cases expval val
      (num-val (num) num)
      (else (eopl:error "expval extract error in expval->num: ~s" val)))))

; extractor : expval -> bool
(define expval->bool
  (lambda (val)
    (cases expval val
      (bool-val (bool) bool)
      (else (eopl:error "expval extract error in expval->bool: ~s" val)))))

; extractor : expval -> proc
(define expval->proc
  (lambda (val)
    (cases expval val
      (proc-val (proc) proc)
      (else (eopl:error "expval extract error in expval->proc: ~s" val)))))


; environment & store
;=====================================================================
;env   : var --- ref
;store :         ref--- expval


;---environment---   

(define-datatype env env?
  (empty-env)
  (extend-env (var symbol?)
              (val ref?) ; !!! in this lang env only stores reference, its value is stored in stores.
              (e env?)))

; init-env
(define init-env
  (extend-env
   'i 2
   (extend-env
    'v 1
    (extend-env
     'x 0
     (empty-env)))))


; apply-env : symbol * env -> ref
(define apply-env
  (lambda (var en)
    (cases env en
      (empty-env () (eopl:error "Unbound variable : ~s" var))
      (extend-env (v val e)
                  (if (equal? v var)
                      val
                      (apply-env var e))))))



;---store---
;unlike env, store is global
(define the-store 'uninitialized)

;---interface-for-store

;empty-store : () -> '()
(define empty-store
  (lambda () '()))

(define get-store
  (lambda () the-store))

;---
(define init-store!
  (lambda ()
    (set! the-store (list (num-val 1) (num-val 5) (num-val 10)))))


; continuation
;=====================================================================

(define-datatype cont cont?
  (end-cont)
  (diff-cont1 (cont cont?)
              (env env?)
              (exp2 expression?))
  (diff-cont2 (cont cont?)
              (val expval?))
  (zero?-cont (cont cont?))
  (if-cont (cont cont?)
           (env env?)
           (exp2 expression?)
           (exp3 expression?))
  (let-cont (cont cont?)
            (env env?)
            (var symbol?)
            (body expression?))
  (call-cont (cont cont?)
             (env env?)
             (rand expression?))
  (call-cont2 (cont cont?)
              (proc proc?))
  (try-cont (cont cont?)
            (env env?)
            (var symbol?)
            (exp2 expression?))
  (raise-cont (cont cont?)))


;apply-cont : cont * expval -> finalanswer
(define apply-cont
  (lambda (ct val)
    (cases cont ct
      (end-cont () (begin (display "End of computation!")
                          val))
      (diff-cont1 (ct0 ev exp) (value-of/k exp ev (diff-cont2 ct0 val)))
      (diff-cont2 (ct0 val0) (apply-cont ct0 (num-val (- (expval->num val0)
                                                         (expval->num val)))))
      (zero?-cont (ct0) (apply-cont ct0 (if (= (expval->num val) 0)
                                            (bool-val #t)
                                            (bool-val #f))))
      (if-cont (ct0 ev exp2 exp3) (if (expval->bool val)
                                      (value-of/k exp2 ev ct0)
                                      (value-of/k exp3 ev ct0)))
      (let-cont (ct0 ev var body) (value-of/k body (extend-env var (apply-newref val) ev) ct0))
      (call-cont (ct0 ev rand) (let ((proci (expval->proc val)))
                                 (cases expression rand
                                   (var-exp (var) (apply-procedure/k proci (apply-env var ev) ct0))
                                   (else (value-of/k rand ev (call-cont2 ct0 proci))))))
      (call-cont2 (ct0 proci) (apply-procedure/k proci (apply-newref val) ct0))
      (try-cont (ct0 ev var handler) (apply-cont ct0 val)) ;!!!
      (raise-cont (ct0) (apply-handler ct0 val)))))     ;!!!


;auxiliary function 
;;; apply-handler will open cont layer by layer until find a try-cont
;;; and then eval the handler expression in the env with the exception
;;; value.

;apply-handler : cont * expval -> finalanswer
(define apply-handler
  (lambda (ct val)
    (cases cont ct
      (try-cont (ct0 ev var handler) (value-of/k handler
                                                 (extend-env var (apply-newref val) ev)
                                                 ct0))
      (end-cont () (eopl:error "Uncaught exception!!!"))
      (diff-cont1 (ct0 ev exp) (apply-handler ct0 val))
      (diff-cont2 (ct0 val0) (apply-handler ct0 val))
      (zero?-cont (ct0) (apply-handler ct0 val))
      (if-cont (ct0 ev exp2 exp3) (apply-handler ct0 val))
      (let-cont (ct0 ev var body) (apply-handler ct0 val))
      (call-cont (ct0 ev rand) (apply-handler ct0 val))
      (call-cont2 (ct0 proci) (apply-handler ct0 val))
      (raise-cont (ct0) (apply-handler ct0 val)))))



; eval
;=====================================================================

; auxiliary function for value-of

; apply-procdure : proc * ref * cont -> expval  !!!
(define apply-procedure/k
  (lambda (proc0 ref0 cont)
    (cases proc proc0
      (procedure (var body en) (value-of/k body (extend-env var ref0 en) cont)))))

; apply-newref : expval -> ref
(define apply-newref
  (lambda (val)
    (let ([ref (length the-store)])
      (set! the-store (append the-store (list val)))
      ref)))

; apply-deref : ref -> expval
(define apply-deref
  (lambda (ref)
    (list-ref the-store ref)))

; apply-setref : ref * expval -> unspecified
(define apply-setref!
  (lambda (ref val)
    (define in-setref!
      (lambda (store ref)
        (cond ((null? store) (eopl:error "uninitilized store"))
              ((= 0 ref) (cons val (cdr store)))
              (else (cons (car store)
                          (in-setref! (cdr store) (- ref 1)))))))
    (set! the-store (in-setref! the-store ref))))




; value-of/k : Exp * Env * cont -> finalanswer
(define value-of/k
  (lambda (exp env cont)
    (cases expression exp
      (const-exp (num) (apply-cont cont (num-val num)))
      (var-exp (var) (apply-cont cont (apply-deref (apply-env var env))))
      (diff-exp (exp1 exp2) (value-of/k exp1
                                        env
                                        (diff-cont1 cont env exp2)))
      (zero?-exp (exp) (value-of/k exp
                                   env
                                   (zero?-cont cont)))
      (if-exp (exp1 exp2 exp3) (value-of/k exp1 env (if-cont cont env exp2 exp3)))
      (let-exp (var exp body) (value-of/k exp env (let-cont cont env var body)))
      (proc-exp (param body) (apply-cont cont (proc-val (procedure param body env))))
      (call-exp (procid exp) (value-of/k procid env (call-cont cont env exp)))
      (try-exp (exp1 var handler) (value-of/k exp1 env (try-cont cont env var handler)))
      (raise-exp (exp) (value-of/k exp env (raise-cont cont))))))



; value-of-program : Program -> Expval
(define value-of-program
  (lambda (pgm)
    (init-store!)
    (cases program pgm
      (a-program (exp) (value-of/k exp init-env (end-cont))))))


; run : String -> Expval
(define run
  (lambda (str)
    (value-of-program (scan&parse str))))



; test
;=====================================================================

;> (run "try if zero?(3) then 1234 else raise -1 catch (x) -(x,1)")
;  End of computation!#(struct:num-val -2)

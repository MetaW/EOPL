#lang eopl
; lang-Threads

; This language support muti-threads it is another use of CPS
; in the design of interpreter.
; But this implementation is just a simulated multi-threads. It
; use a scheduler to manage different thread and it acturally running
; in only one core of CPU, cause essentially it is just a simgle
; thread of interpreter.

;TODO : add "begin ... end", "set id = ..." to test the language.

; 1. concrete & abstract syntax tree & scanner/parser
;=====================================================================

;---concrete syntax tree:

;Program :: = Expression

;Expression :: = Number
;              | -(Expression, Expression)
;              | zero? (Expression)
;              | if Expression then Expression else Expression
;              | Identifer
;              | let Identifer = Expression in Expression
;              | proc (Idenfifer) Expression
;              | (Expression Expression)

;              | spawn(Expression)
;              | mutex()
;              | wait(Expression)
;              | signal(Expression)


;---scanner&grammar spec
(define scanner-spec
  '((whitespace (whitespace) skip)
    (comment ("%" (arbno (not #\newline))) skip)
    (identifer (letter (arbno (or letter digit "-" "_" "?"))) symbol)
    (number (digit (arbno digit)) number)
    (number ("-" digit (arbno digit)) number)))
;   (class (regexp) action)
; string (keyword) from grammar-spec (eg: "-","if","let","=",...) has a higher priority than that in scanner-spec.


(define grammar-spec
  '((program (expression) a-program)
    (expression (number) const-exp)
    (expression ("-" "(" expression "," expression ")") diff-exp)
    (expression ("zero?" "(" expression ")") zero?-exp)
    (expression ("if" expression "then" expression "else" expression) if-exp)
    (expression (identifer) var-exp)
    (expression ("let" identifer "=" expression "in" expression) let-exp)
    (expression ("proc" "(" identifer ")" expression) proc-exp)
    (expression ("(" expression expression ")") call-exp)
    (expression ("spawn" "(" expression ")") spawn-exp)
    (expression ("mutex" "(" ")") mutex-exp)
    (expression ("wait" "(" expression ")") wait-exp)
    (expression ("signal" "(" expression ")") signal-exp)))
;  (algebric-data-type (reg-exp of concrete-syntax with class/string/ADT) constructor)
; class/string -> terminator
; ADT -> nonterminator


;---abstract syntax tree

; use auto-generated datatype for program and expression
;(sllgen:make-define-datatypes scanner-spec grammar-spec)

;see what is generated by calling (show-the-datatypes), the result is following:
;(define show-the-datatypes
;  (lambda () (sllgen:list-define-datatypes scanner-spec grammar-spec)))


;the following datatype can be auto-generated as mentioned above.
(define-datatype program program?
  (a-program (a-program1 expression?)))

(define-datatype expression expression?
  (const-exp (const-exp2 number?))
  (diff-exp (diff-exp3 expression?) (diff-exp4 expression?))
  (zero?-exp (zero?-exp5 expression?))
  (if-exp (if-exp6 expression?) (if-exp7 expression?) (if-exp8 expression?))
  (var-exp (var-exp9 symbol?))
  (let-exp (let-exp10 symbol?) (let-exp11 expression?) (let-exp12 expression?))
  (proc-exp (proc-exp13 symbol?) (proc-exp14 expression?))
  (call-exp (call-exp15 expression?) (call-exp16 expression?))
  (spawn-exp (spawn-exp17 expression?))
  (mutex-exp)
  (wait-exp (wait-exp18 expression?))
  (signal-exp (signal-exp19 expression?)))



; auto-generated scanner & parser:

; scan&parse : string -> program
(define scan&parse
  (sllgen:make-string-parser scanner-spec grammar-spec))


; 2. expressed value & denoted value
;=====================================================================
;expressed value : Int Bool Proc Mutex
;denoted value   : Ref(expressed value)
;-------

;------ scheme value

; datatype proc is not necessary
(define-datatype proc proc?
  (procedure (var symbol?)
             (body expression?)
             (en env?)))
; ref type = number => address in store
(define ref?
  (lambda (ref)
    (number? ref)))


;datatype mutex
(define-datatype mutex mutex?
  (a-mutex (closed ref?)
           (wait-queue ref?)))


;------ expressed value : expval
(define-datatype expval expval?
  (num-val (num number?))
  (bool-val (bool boolean?))
  (proc-val (proc proc?))
  (mutex-val (mut mutex?)))


; extractor : expval -> number
(define expval->num
  (lambda (val)
    (cases expval val
      (num-val (num) num)
      (else (eopl:error "expval extract error in expval->num: ~s" val)))))

; extractor : expval -> bool
(define expval->bool
  (lambda (val)
    (cases expval val
      (bool-val (bool) bool)
      (else (eopl:error "expval extract error in expval->bool: ~s" val)))))

; extractor : expval -> proc
(define expval->proc
  (lambda (val)
    (cases expval val
      (proc-val (proc) proc)
      (else (eopl:error "expval extract error in expval->proc: ~s" val)))))

; extractor : expval -> mutex
(define expval->mutex
  (lambda (val)
    (cases expval val
      (mutex-val (mut) mut)
      (else (eopl:error "expval extract error in expval->mutex: ~s" val)))))

; 3. environment & store
;=====================================================================
;env   : var --- ref
;store :         ref--- expval


;---environment---   

(define-datatype env env?
  (empty-env)
  (extend-env (var symbol?)
              (val ref?) ; !!! in this lang env only stores reference, its value is stored in stores.
              (e env?)))

; init-env
(define init-env
  (extend-env
   'i 2
   (extend-env
    'v 1
    (extend-env
     'x 0
     (empty-env)))))


; apply-env : symbol * env -> ref
(define apply-env
  (lambda (var en)
    (cases env en
      (empty-env () (eopl:error "Unbound variable : ~s" var))
      (extend-env (v val e)
                  (if (equal? v var)
                      val
                      (apply-env var e))))))



;---store---
;unlike env, store is global
(define the-store 'uninitialized)

;---interface-for-store

;empty-store : () -> '()
(define empty-store
  (lambda () '()))

(define get-store
  (lambda () the-store))

;---
(define init-store!
  (lambda ()
    (set! the-store (list (num-val 1) (num-val 5) (num-val 10)))))


; 4. continuation
;=====================================================================

(define-datatype cont cont?
  (end-main-thread-cont)
  (end-subthread-cont)
  (diff-cont1 (cont cont?)
              (env env?)
              (exp2 expression?))
  (diff-cont2 (cont cont?)
              (val expval?))
  (zero?-cont (cont cont?))
  (if-cont (cont cont?)
           (env env?)
           (exp2 expression?)
           (exp3 expression?))
  (let-cont (cont cont?)
            (env env?)
            (var symbol?)
            (body expression?))
  (call-cont (cont cont?)
             (env env?)
             (rand expression?))
  (call-cont2 (cont cont?)
              (proc proc?))
  (spawn-cont (ct0 cont?))
  (wait-cont (ct0 cont?))
  (signal-cont (ct0 cont?)))


;apply-cont : cont * expval -> finalanswer
(define apply-cont
  (lambda (ct val)
    (if (time-expired?)
        (begin (place-on-ready-queue! (lambda () (apply-cont ct val))) ; this ia another way to representate a thread.
               (run-next-thread))
        (begin (decrement-timer!)
               (cases cont ct
                 (end-main-thread-cont () (set-final-answer! val) (run-next-thread))
                 (end-subthread-cont () (run-next-thread))
                 (diff-cont1 (ct0 ev exp) (value-of/k exp ev (diff-cont2 ct0 val)))
                 (diff-cont2 (ct0 val0) (apply-cont ct0 (num-val (- (expval->num val0)
                                                                    (expval->num val)))))
                 (zero?-cont (ct0) (apply-cont ct0 (if (= (expval->num val) 0)
                                                       (bool-val #t)
                                                       (bool-val #f))))
                 (if-cont (ct0 ev exp2 exp3) (if (expval->bool val)
                                                 (value-of/k exp2 ev ct0)
                                                 (value-of/k exp3 ev ct0)))
                 (let-cont (ct0 ev var body) (value-of/k body (extend-env var (apply-newref val) ev) ct0))
                 (call-cont (ct0 ev rand) (let ((proci (expval->proc val)))
                                            (cases expression rand
                                              (var-exp (var) (apply-procedure/k proci (apply-env var ev) ct0))
                                              (else (value-of/k rand ev (call-cont2 ct0 proci))))))
                 (call-cont2 (ct0 proci) (apply-procedure/k proci (apply-newref val) ct0))
                 (spawn-cont (ct0) (let ((proci (expval->proc val)))
                                     (place-on-ready-queue!
                                      (lambda ()                                                           ; this is the representation of
                                        (apply-procedure/k proci (apply-newref (num-val 99)) (end-subthread-cont))))     ; thread! the (num-val 99) is choosed randomly
                                     (apply-cont ct0 (num-val 90)))) ; cause (spawn ...) is just for effect, it has no result expval, so we pass its cont a random expval. 
                 (wait-cont (ct0) (let ((mut (expval->mutex val)))
                                    (cases mutex mut
                                      (a-mutex (closed?-ref queue-ref)
                                               (if (expval->bool (apply-deref closed?-ref))
                                                   (begin (apply-setref! queue-ref (enqueue (apply-deref queue-ref) (apply-cont ct0 (num-val 99))))
                                                          (run-next-thread))
                                                   (begin (apply-setref! closed?-ref (bool-val #t))
                                                          (apply-cont ct0 (num-val 99))))))))
                 (signal-cont (ct0) (let ((mut (expval->mutex val)))
                                      (cases mutex mut
                                        (a-mutex (closed?-ref queue-ref)
                                                 (if (expval->bool (apply-deref closed?-ref))
                                                     (if (empty? (apply-deref queue-ref))
                                                         (apply-setref! closed?-ref (bool-val #f))
                                                         (dequeue (apply-deref queue-ref)
                                                                  (lambda (q-head q-tail)
                                                                    (begin (place-on-ready-queue! q-head)
                                                                           (apply-setref! queue-ref q-tail)))))
                                                     (apply-cont ct0 (num-val 99))))))))))))



; 5. scheduler
;=====================================================================

; ----- state
(define the-ready-queue 'uninitilized)
(define the-final-answer 'uninitilized)
(define the-max-time-slice 'uninitilized)
(define the-time-remaining 'uninitilized)


; -----queue
; we don't use ADT yo difine a queue type, but just use
; list to representate the queue.

; empty-queue : () -> queue
(define empty-queue
  (lambda () '()))

; empty? : queue -> bool-val
(define empty? null?)


; enqueue : queue * expval -> queue
(define enqueue
  (lambda (que val)
    (append que (list val))))


; dequeue : queue * (queue-head * queue-tail -> queue-head) -> queue-head
(define dequeue
  (lambda (que f)
    (f (car que) (cdr que))))


; ----- interface

;initilize-scheduler! : num-val -> unspec
(define initilize-scheduler!
  (lambda (maxtime)
    (set! the-ready-queue (empty-queue))
    (set! the-max-time-slice maxtime)
    (set! the-time-remaining the-max-time-slice)))

;place-on-ready-queue! : thread -> unspec
(define place-on-ready-queue!
  (lambda (th)
    (set! the-ready-queue (enqueue the-ready-queue th))))

;run-next-thread : () -> finalanswer
(define run-next-thread
  (lambda ()
    (if (empty? the-ready-queue)
        the-final-answer
        (dequeue the-ready-queue
                 (lambda (q-head q-tail)
                   (set! the-ready-queue q-tail)
                   (set! the-time-remaining the-max-time-slice)
                   (q-head)))))) ;!!! q-head is a thread date, it can directlly run.


;set-final-answer! : expval -> unspec
(define set-final-answer!
  (lambda (val)
    (set! the-final-answer val)))


;time-expired? : () -> bool-val
(define time-expired?
  (lambda ()
    (zero? the-time-remaining)))


;decrement-timer! : () -> unspec
(define decrement-timer!
  (lambda ()
    (set! the-time-remaining (- the-time-remaining 1))))




; 6. eval
;=====================================================================

; auxiliary function for value-of

; apply-procdure : proc * ref * cont -> expval  !!!
(define apply-procedure/k
  (lambda (proc0 ref0 cont)
    (cases proc proc0
      (procedure (var body en) (value-of/k body (extend-env var ref0 en) cont)))))

; apply-newref : expval -> ref
(define apply-newref
  (lambda (val)
    (let ([ref (length the-store)])
      (set! the-store (append the-store (list val)))
      ref)))

; apply-deref : ref -> expval
(define apply-deref
  (lambda (ref)
    (list-ref the-store ref)))

; apply-setref! : ref * expval -> unspecified
(define apply-setref!
  (lambda (ref val)
    (define in-setref!
      (lambda (store ref)
        (cond ((null? store) (eopl:error "uninitilized store"))
              ((= 0 ref) (cons val (cdr store)))
              (else (cons (car store)
                          (in-setref! (cdr store) (- ref 1)))))))
    (set! the-store (in-setref! the-store ref))))




; value-of/k : Exp * Env * cont -> finalanswer
(define value-of/k
  (lambda (exp env cont)
    (cases expression exp
      (const-exp (num) (apply-cont cont (num-val num)))
      (var-exp (var) (apply-cont cont (apply-deref (apply-env var env))))
      (diff-exp (exp1 exp2) (value-of/k exp1
                                        env
                                        (diff-cont1 cont env exp2)))
      (zero?-exp (exp) (value-of/k exp
                                   env
                                   (zero?-cont cont)))
      (if-exp (exp1 exp2 exp3) (value-of/k exp1 env (if-cont cont env exp2 exp3)))
      (let-exp (var exp body) (value-of/k exp env (let-cont cont env var body)))
      (proc-exp (param body) (apply-cont cont (proc-val (procedure param body env))))
      (call-exp (procid exp) (value-of/k procid env (call-cont cont env exp)))
      (spawn-exp (exp) (value-of/k exp env (spawn-cont cont)))
      (mutex-exp () (apply-cont cont (mutex-val (a-mutex (apply-newref (bool-val #f))     ; !!! here apply-newref did not pass a expval but just a scheme value as a wait-queue
                                                         (apply-newref '())))))            ; !!! it is not proper, we should make the wait-queue as a expval.
      (wait-exp (exp) (value-of/k exp env (wait-cont cont)))
      (signal-exp (exp) (value-of/k exp env (signal-cont cont))))))



; value-of-program : Program -> Expval
(define value-of-program
  (lambda (maxtime pgm)
    (init-store!)
    (initilize-scheduler! maxtime)
    (cases program pgm
      (a-program (exp) (value-of/k exp init-env (end-main-thread-cont))))))


; run : String -> Expval
(define run
  (lambda (str)
    (value-of-program 3 (scan&parse str))))



; test
;=====================================================================

;> (run "let x = 3 in x")
;  End of computation!#(struct:num-val 3)

;> (run "let f = proc (x) -(x,1) in (f 5)")
;  End of computation!#(struct:num-val 4)

;> (run "let x = 5 in if zero?(x) then x else -(0,x)")
;  End of computation!#(struct:num-val -5)

;> let x = 0 in let incr_x = proc (id) proc (dummy) -(x,-1) in spawn((incr_x 100))
;  #(struct:num-val 90)

;> (run "let x = mutex() in wait(x)")
;  #(struct:num-val 99)

;> (run "let x = mutex() in signal(x)")
;  #(struct:num-val 99)
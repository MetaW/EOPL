#lang eopl

;a type checker for language : CALL BY NAME+NEED


;concrete & abstract syntax tree & scanner/parser
;=====================================================================

;---concrete syntax tree:

;Program :: = Expression

;Expression :: = Number
;              | -(Expression, Expression)
;              | zero? (Expression)
;              | if Expression then Expression else Expression
;              | Identifer
;              | let Identifer = Expression in Expression
;              | proc (Idenfifer) Expression
;              | (Expression Expression)
;              | begin Expression {; Expression}* end
;              | set Identifer = Expression
;              | pair(Expression, Expression)
;              | left(Expression)
;              | right(Expression)
;              | setleft(Expression,Expression)
;              | setright(Expression,Expression)


;Type :: = Int
;        | Bool
;        | Pair Type Type
;        | Type -> Type
;        | Unit


;---scanner&grammar spec
(define scanner-spec
  '((whitespace (whitespace) skip)
    (comment ("%" (arbno (not #\newline))) skip)
    (identifer (letter (arbno (or letter digit "-" "_" "?"))) symbol)
    (number (digit (arbno digit)) number)
    (number ("-" digit (arbno digit)) number)))
;   (class (regexp) action)
; string (keyword) from grammar-spec (eg: "-","if","let","=",...) has a higher priority than that in scanner-spec.


(define grammar-spec
 '((program (expression) a-program)
   (expression (number) const-exp)
   (expression ("-" "(" expression "," expression ")") diff-exp)
   (expression ("zero?" "(" expression ")") zero?-exp)
   (expression ("if" expression "then" expression "else" expression) if-exp)
   (expression (identifer) var-exp)
   (expression ("let" identifer "=" expression "in" expression) let-exp)
   (expression ("proc" "(" identifer ":" type ")" expression) proc-exp)
   (expression ("(" expression expression ")") call-exp)
   (expression ("begin" expression (arbno ";" expression) "end") begin-exp)
   (expression ("set" identifer "=" expression) assign-exp)
   (expression ("pair" "(" expression "," expression ")") pair-exp)
   (expression ("left" "(" expression ")") left-exp)
   (expression ("right" "(" expression ")") right-exp)
   (expression ("setleft" "(" expression "," expression ")") setleft-exp)
   (expression ("setright" "(" expression "," expression ")") setright-exp)
   (type ("int") int-type)
   (type ("bool") bool-type)
   (type ("unit") unit-type)
   (type ("(" type "->" type ")") proc-type)))
;  (algebric-data-type (reg-exp of concrete-syntax with class/string/ADT) constructor)
; class/string -> terminator
; ADT -> nonterminator


;---abstract syntax tree

; use auto-generated datatype for program and expression
;(sllgen:make-define-datatypes scanner-spec grammar-spec)

;see what is generated by calling (show-the-datatypes), the result is following:
;(define show-the-datatypes
;  (lambda () (sllgen:list-define-datatypes scanner-spec grammar-spec)))


;the following datatype can be auto-generated as mentioned above.

(define-datatype program program?
  (a-program (a-program1 expression?)))

(define-datatype expression expression?
   (const-exp (const-exp2 number?))
   (diff-exp (diff-exp3 expression?) (diff-exp4 expression?))
   (zero?-exp (zero?-exp5 expression?))
   (if-exp (if-exp6 expression?) (if-exp7 expression?) (if-exp8 expression?))
   (var-exp (var-exp9 symbol?))
   (let-exp (let-exp10 symbol?) (let-exp11 expression?) (let-exp12 expression?))
   (proc-exp (proc-exp13 symbol?) (proc-exp14 type?) (proc-exp15 expression?))
   (call-exp (call-exp16 expression?) (call-exp17 expression?))
   (begin-exp (begin-exp18 expression?) (begin-exp19 (list-of expression?)))
   (assign-exp (assign-exp20 symbol?) (assign-exp21 expression?))
   (pair-exp (pair-exp22 expression?) (pair-exp23 expression?))
   (left-exp (left-exp24 expression?))
   (right-exp (right-exp25 expression?))
   (setleft-exp (setleft-exp26 expression?) (setleft-exp27 expression?))
   (setright-exp (setright-exp28 expression?) (setright-exp29 expression?)))

(define-datatype type type?
  (int-type)
  (bool-type)
  (unit-type)
  (pair-type (fst type?) (snd type?))
  (proc-type (proc-type30 type?) (proc-type31 type?)))


; auto-generated scanner & parser:

; scan&parse : string -> program
(define scan&parse
  (sllgen:make-string-parser scanner-spec grammar-spec))






; type environment
;=====================================================================

(define-datatype tenv tenv?
  (empty-tenv)
  (extend-tenv (var symbol?)
               (ty type?) 
               (e tenv?)))

; init-tenv
(define init-tenv
  (extend-tenv
   'i (int-type)
   (extend-tenv
    'v (int-type)
    (extend-tenv
     'x (int-type)
     (empty-tenv)))))


; apply-tenv : symbol * tenv -> type
(define apply-tenv
  (lambda (var en)
    (cases tenv en
      (empty-tenv () (eopl:error "Unbound variable : ~s" var))
      (extend-tenv (v ty e)
                  (if (equal? v var)
                      ty
                      (apply-tenv var e))))))



; type checker
;=====================================================================

; auxiliary functions:

; check-equal-type! : type * type * exp -> Unspec
(define check-equal-type!
  (lambda (ty1 ty2 exp)
    (if (not (equal? ty1 ty2))
        (eopl:error "types does not match: " (type-to-external-form ty1) "!=" (type-to-external-form ty2) "in" exp)
        '())))

; type-to-external-form : type -> list
(define type-to-external-form
  (lambda (ty)
    (cases type ty
      (int-type () 'int)
      (bool-type () 'bool)
      (unit-type () 'unit)
      (pair-type (ty1 ty2) (list "(" (type-to-external-form ty1) "," (type-to-external-form ty2) ")"))
      (proc-type (ty1 ty2) (list (type-to-external-form ty1)
                                 '->
                                 (type-to-external-form ty2))))))

; type-of : exp * tenv -> type
(define type-of
  (lambda (exp tenv)
    (cases expression exp
      (const-exp (num) (int-type))
      (var-exp (var) (apply-tenv var tenv))
      (diff-exp (exp1 exp2) (let ((ty1 (type-of exp1 tenv))
                                  (ty2 (type-of exp2 tenv)))
                              (begin (check-equal-type! ty1 (int-type) exp1)
                                     (check-equal-type! ty2 (int-type) exp2)
                                     (int-type))))
      (zero?-exp (exp) (let ((ty (type-of exp tenv)))
                         (begin (check-equal-type! ty (int-type) exp)
                                (bool-type))))
      (if-exp (exp1 exp2 exp3) (let ((ty1 (type-of exp1 tenv))
                                     (ty2 (type-of exp2 tenv))
                                     (ty3 (type-of exp3 tenv)))
                                 (begin (check-equal-type! ty1 (bool-type) exp)
                                        (check-equal-type! ty2 ty3 exp)
                                        ty2)))
      (let-exp (var exp body) (let ((ty (type-of exp tenv)))
                                (type-of body (extend-tenv var ty tenv))))
      (proc-exp (var ty body) (proc-type ty (type-of body (extend-tenv var ty tenv))) )
      (call-exp (procid exp) (let ((procty (apply-tenv procid tenv)))
                               (cases type procty
                                 (proc-type (opty arty) (check-equal-type! opty (type-of exp tenv) exp))
                                 (else (eopl:error "operand: " procid "is not proc-type, but" procty)))))
      (begin-exp (exp exps)
                 (define inner
                   (lambda (expr exprs)
                     (let ((v1 (type-of expr tenv)))
                         (if (null? exprs)
                         v1
                         (inner (car exprs) (cdr exprs))))))
                 (inner exp exps))
      (assign-exp (var exp) (let ((ty1 (apply-tenv var tenv))
                                  (ty2 (type-of exp tenv)))
                              (begin (check-equal-type! ty1 ty2 exp)
                                     (unit-type))))
      (pair-exp (exp1 exp2) (let ((ty1 (type-of exp1 tenv))
                                  (ty2 (type-of exp2 tenv)))
                              (pair-type ty1 ty2)))
      (left-exp (exp) (let ((v (type-of exp tenv)))
                        (cases type v
                          (pair-type (lty rty) lty)
                          (else eopl:error "type" v "is not pair-type"))))
      (right-exp (exp) (let ((v (type-of exp tenv)))
                        (cases type v
                          (pair-type (lty rty) rty)
                          (else eopl:error "type" v "is not pair-type"))))
      (setleft-exp (exp1 exp2) (let ([pty (type-of exp1 tenv)]
                                     [vty (type-of exp2 tenv)])
                                 (cases type pty
                                   (pair-type (lty rty) (check-equal-type! lty vty exp))
                                   (else eopl:error "type" pty "is not pair-type"))))
      (setright-exp (exp1 exp2) (let ([pty (type-of exp1 tenv)]
                                      [vty (type-of exp2 tenv)])
                                 (cases type pty
                                   (pair-type (lty rty) (check-equal-type! rty vty exp))
                                   (else eopl:error "type" pty "is not pair-type")))))))


; type-of-program : program -> type
(define type-of-program
  (lambda (pgm)
    (cases program pgm
      (a-program (exp) (type-of exp init-tenv)))))


; run : String -> list
(define run
  (lambda (str)
    (type-to-external-form (type-of-program (scan&parse str)))))



; test
;=====================================================================

;> (run "let f = proc (x) set x = 5 in let t = 2 in begin (f t); t end")
;  #(struct:num-val 5)
